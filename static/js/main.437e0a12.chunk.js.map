{"version":3,"sources":["components/PostCard.module.scss","components/NavBar.module.css","pages/Login.module.css","images/user-icon.png","pages/Profile.module.scss","pages/Posts.module.css","components/Loader.module.css","model/graphql/queries.js","components/PostCard.jsx","model/authStore.js","components/NavBar.jsx","components/Loader.jsx","pages/Posts.jsx","pages/Profile.jsx","pages/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","GET_POSTS","gql","PostCard","user","title","id","body","author","history","useHistory","className","classes","onClick","push","UserImage","alt","src","img","PostContent","Author","name","PostTitle","PostBody","AuthContext","React","createContext","LOGIN","authInitialState","loggedIn","authReducer","state","action","type","NavBar","header","button","useContext","dispatch","NavBarButton","link","Header","LogoutButton","localStorage","removeItem","Loader","Posts","useQuery","loading","error","data","Users","UsersList","posts","map","post","key","Profile","userId","useParams","GET_PROFILE","ProfileCard","UserInfo","email","address","city","street","suite","zipcode","phone","website","company","catchPhrase","bs","Login","useState","login","setLogin","message","setMessage","LoginHeader","LoginContent","onSubmit","e","preventDefault","userName","setItem","warning","placeholder","value","onChange","target","App","useReducer","getItem","Provider","path","render","exact","to","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,UAAY,4BAA4B,YAAc,8BAA8B,OAAS,yBAAyB,UAAY,4BAA4B,SAAW,6B,mBCAjOD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,aAAe,6BAA6B,aAAe,+B,mBCA7ID,EAAOC,QAAU,CAAC,YAAc,2BAA2B,aAAe,4BAA4B,MAAQ,qBAAqB,QAAU,yB,mBCD7ID,EAAOC,QAAU,IAA0B,uC,mBCC3CD,EAAOC,QAAU,CAAC,YAAc,6BAA6B,UAAY,2BAA2B,SAAW,4B,mBCA/GD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAW,2B,w1BCCtD,IAAMC,EAAYC,cAAH,K,0DCGTC,EAAW,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACXC,GAAuBD,EAA3BE,GAA2BF,EAAvBC,OAAOE,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,OACpBC,EAAUC,cAMd,OAAO,yBAAKC,UAAaC,IAAQT,SAAUU,QAJvB,WAChBJ,EAAQK,KAAR,gBAAsBN,EAAOF,OAI7B,yBAAKK,UAAWC,IAAQG,UAAWC,IAAI,GAAGC,IAAKC,MAC3C,yBAAKP,UAAWC,IAAQO,aACpB,wBAAIR,UAAWC,IAAQQ,QAAvB,WAAwCZ,EAAOa,MAC/C,wBAAIV,UAAWC,IAAQU,WAAvB,UAA0CjB,GAC1C,uBAAGM,UAAWC,IAAQW,UAAWhB,EAAjC,QCjBHiB,EAAcC,IAAMC,gBAEpBC,EAAQ,oBAGRC,EAAmB,CAC5BxB,KAAM,GACNyB,UAAU,GAGDC,EAAa,SAACC,EAAOC,GAC9B,OAAQA,EAAOC,MACX,KAAKN,EACD,MAAO,CACHvB,KAAM4B,EAAO5B,KACbyB,UAAU,GAElB,IAdc,qBAeV,MAAO,CACHzB,KAAM,GACNyB,UAAU,GAElB,QACI,OAAOE,I,iBCnBNG,EAAS,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OAAY,EAEdC,qBAAWb,GAA9BO,EAFiC,EAEjCA,MAAOO,EAF0B,EAE1BA,SACR7B,EAAUC,cAahB,OAAO,yBAAKC,UAAWC,IAAQsB,QAC1BE,GAAU,4BAAQzB,UAAWC,IAAQ2B,aAAc1B,QAPxB,WACzBuB,GACC3B,EAAQK,KAAKsB,EAAOI,QAK+DJ,EAAO/B,OAC9F,wBAAIM,UAAWC,IAAQ6B,QAASN,GAChC,2BACKJ,EAAM3B,KAAN,iBAAsB2B,EAAM3B,KAA5B,MAAuC,UAE5C,4BAAQO,UAAWC,IAAQ8B,aAAc7B,QAjBvB,WD4BtB8B,aAAaC,WAAW,YC1BpBN,EAAS,CAACL,KDRI,yBCuBd,Y,iBCxBKY,EAAS,kBAAM,yBAAKlC,UAAWC,IAAQiC,QAChD,8BACA,8BACA,8BACA,gCCCSC,EAAQ,WAAO,IAAD,EAEUC,mBAAS9C,GAAlC+C,EAFe,EAEfA,QAASC,EAFM,EAENA,MAAOC,EAFD,EAECA,KAExB,OAAIF,EAAgB,kBAAC,EAAD,MAChBC,EAAc,uCAEX,yBAAKtC,UAAaC,IAAQuC,OAC7B,kBAAC,EAAD,CAAQhB,OAAQ,eAChB,yBAAKxB,UAAWC,IAAQwC,WACnBF,EAAKG,MAAMH,KAAKI,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAAUC,IAAKD,EAAKjD,GAAIF,KAAMmD,U,iBCT5DE,EAAU,WAAO,IAEnBC,EAAUC,cAAVD,OAFkB,EAGQX,mBNOV,SAACW,GAAD,OAAYxD,cAAX,IAEPwD,GMTyBE,CAAYF,IAA9CV,EAHiB,EAGjBA,QAASC,EAHQ,EAGRA,MAAOC,EAHC,EAGDA,KAExB,OAAIF,EAAgB,kBAAC,EAAD,MAChBC,EAAc,uCAEX,6BACH,kBAAC,EAAD,CAAQd,OAAO,UAAUC,OAAQ,CAAC/B,MAAO,IAAKmC,KAAM,OACpD,yBAAK7B,UAAWC,IAAQiD,aACpB,yBAAKlD,UAAWC,IAAQG,UAAWC,IAAI,GAAGC,IAAKC,MAC/C,yBAAKP,UAAWC,IAAQkD,UACpB,4BAAKZ,EAAK9C,KAAKiB,MACf,4BACI,sCAAY6B,EAAK9C,KAAK2D,OACtB,uCAAab,EAAK9C,KAAK4D,QAAQC,KAA/B,KAAuCf,EAAK9C,KAAK4D,QAAQE,OAAzD,KAAmEhB,EAAK9C,KAAK4D,QAAQG,MAArF,KAA8FjB,EAAK9C,KAAK4D,QAAQI,SAChH,sCAAYlB,EAAK9C,KAAKiE,OACtB,wCAAcnB,EAAK9C,KAAKkE,SACxB,wCAAcpB,EAAK9C,KAAKmE,QAAQlD,KAAhC,KAAwC6B,EAAK9C,KAAKmE,QAAQC,YAA1D,KAAyEtB,EAAK9C,KAAKmE,QAAQE,GAA3F,U,iBCxBPC,EAAQ,WAAO,IACjBpC,EAAYD,qBAAWb,GAAvBc,SADgB,EAECqC,mBAAS,IAFV,mBAElBC,EAFkB,KAEXC,EAFW,OAGKF,mBAAS,IAHd,mBAGlBG,EAHkB,KAGTC,EAHS,KAoBvB,OAAO,yBAAKpE,UAAWC,IAAQ8D,OAC3B,yBAAK/D,UAAWC,IAAQoE,aACpB,2CAEJ,yBAAKrE,UAAWC,IAAQqE,cACpB,qDACA,0BAAMC,SAjBO,SAACC,GAElB,GADAA,EAAEC,iBACCR,EAAO,CAEN,IAAMxE,GLeQiF,EKfST,ELgB/BjC,aAAa2C,QAAQ,WAAYD,GAC1BA,GKhBC/C,EAAS,CAACL,KAAMN,EAAOvB,cAEvB2E,EAAW,uBAAGpE,UAAWC,IAAQ2E,SAAtB,oBLYE,IAACF,IKDV,2BAAOhE,KAAK,QAAQY,KAAK,OAAOuD,YAAY,iBAAiBC,MAAOb,EAAOc,SAtB5D,SAACP,GACxBN,EAASM,EAAEQ,OAAOF,UAsBV,4BAAQxD,KAAK,UAAb,UAEH6C,K,MCSEc,MAlCf,WAAgB,IAAD,EAEeC,qBAAW/D,EAAaF,GAFvC,mBAEJG,EAFI,KAEGO,EAFH,KAKX,IAAKP,EAAM3B,KAAM,CACb,IAAMA,ENcHuC,aAAamD,QAAQ,YMbpB1F,GACAkC,EAAS,CAACL,KAAMN,EAAOvB,SAI/B,OACI,yBAAKO,UAAU,eACX,yBAAKA,UAAU,eACX,kBAACa,EAAYuE,SAAb,CAAsBN,MAAO,CAAC1D,QAAOO,aAChCP,EAAM3B,KACH,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4F,KAAK,gBAAgBC,OAAQ,kBAAM,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAUE,GAAG,OAGjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOH,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAUE,GAAG,gBCtBrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVAC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,kBAGbC,IAASb,OACP,kBAAC,iBAAD,CAAgBQ,OAAQA,GAAxB,gcAEI,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGRM,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtE,GACLuE,QAAQvE,MAAMA,EAAM6B,c","file":"static/js/main.437e0a12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostCard\":\"PostCard_PostCard__ORuDz\",\"UserImage\":\"PostCard_UserImage__rkU0M\",\"PostContent\":\"PostCard_PostContent__3W53f\",\"Author\":\"PostCard_Author__2MPb9\",\"PostTitle\":\"PostCard_PostTitle__35rKD\",\"PostBody\":\"PostCard_PostBody__Abv7m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__1SVee\",\"Header\":\"NavBar_Header__UJAGq\",\"LogoutButton\":\"NavBar_LogoutButton__1VEBL\",\"NavBarButton\":\"NavBar_NavBarButton__1IrG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginHeader\":\"Login_LoginHeader__1JtKF\",\"LoginContent\":\"Login_LoginContent__3zS45\",\"Login\":\"Login_Login__1smD9\",\"warning\":\"Login_warning__1vm5b\"};","module.exports = __webpack_public_path__ + \"static/media/user-icon.7af4ad35.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileCard\":\"Profile_ProfileCard__2HZgY\",\"UserImage\":\"Profile_UserImage__3f3TF\",\"UserInfo\":\"Profile_UserInfo__fsNEl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersList\":\"Posts_UsersList__31YPF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__3JFA1\",\"lds-ring\":\"Loader_lds-ring__1fveN\"};","import { gql } from '@apollo/client';\r\n\r\nexport const GET_POSTS = gql`\r\n    query {\r\n      posts(pagination: {limit:100}) {\r\n        count\r\n        data {\r\n          id\r\n          title\r\n          body\r\n          author {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }   \r\n`;\r\n\r\nexport const GET_PROFILE = (userId) => gql`\r\n    query {\r\n      user(userId: ${userId}) {\r\n        name\r\n        email\r\n        address {\r\n          street\r\n          suite\r\n          city\r\n          zipcode\r\n        }\r\n        phone\r\n        website\r\n        company {\r\n          name\r\n          catchPhrase\r\n          bs\r\n        }\r\n      }\r\n    }\r\n`;","import React from 'react';\r\nimport classes from './PostCard.module.scss';\r\nimport {useHistory} from 'react-router-dom';\r\nimport img from '../images/user-icon.png'\r\n\r\nexport const PostCard = ({user}) => {\r\n    const {id, title, body, author} = user;\r\n    let history = useHistory();\r\n\r\n    const onCardClick = () => {\r\n        history.push(`/user/${author.id}`);\r\n    };\r\n\r\n    return <div className = {classes.PostCard} onClick={onCardClick}>\r\n        <img className={classes.UserImage} alt='' src={img}/>\r\n            <div className={classes.PostContent}>\r\n                <h2 className={classes.Author}>Author: {author.name}</h2>\r\n                <h3 className={classes.PostTitle}>Title: {title}</h3>\r\n                <p className={classes.PostBody}>{body} </p>\r\n            </div>\r\n    </div>;\r\n};","import React from \"react\";\nexport const AuthContext = React.createContext();\n\nexport const LOGIN = 'authReducer/LOGIN';\nexport const LOGOUT = 'authReducer/LOGOUT';\n\nexport const authInitialState = {\n    user: '',\n    loggedIn: false\n};\n\nexport const authReducer =(state, action) => {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                user: action.user,\n                loggedIn: true\n            };\n        case LOGOUT:\n            return {\n                user: '',\n                loggedIn: false\n            };\n        default:\n            return state;\n    }\n};\n\nexport const checkAuth = () => {\n    return localStorage.getItem('userName');\n};\n\nexport const loginUser = (userName) => {\n    localStorage.setItem('userName', userName);\n    return userName;\n};\n\nexport const logoutUser = () => {\n    localStorage.removeItem('userName');\n    return true;\n};\n","import React, {useContext} from \"react\";\nimport {useHistory} from 'react-router-dom';\nimport {AuthContext, LOGOUT, logoutUser} from \"../model/authStore\";\nimport classes from './NavBar.module.css'\n\nexport const NavBar = ({header, button}) => {\n\n    const {state, dispatch} = useContext(AuthContext);\n    const history = useHistory();\n\n    const onLogoutClick = () => {\n        logoutUser();\n        dispatch({type: LOGOUT});\n    };\n\n    const onNavButtonClickHandler = () => {\n        if(button) {\n            history.push(button.link);\n        }\n    };\n\n    return <div className={classes.NavBar}>\n        {button && <button className={classes.NavBarButton} onClick={onNavButtonClickHandler}>{button.title}</button>}\n        <h2 className={classes.Header}>{header}</h2>\n        <p>\n            {state.user? `Hello, ${state.user} !` : 'Hello!'}\n        </p>\n        <button className={classes.LogoutButton} onClick={onLogoutClick}>Logout</button>\n    </div>\n};","import React from \"react\";\nimport classes from './Loader.module.css';\n\nexport const Loader = () => <div className={classes.Loader}>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n</div>;","import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_POSTS } from '../model/graphql/queries';\r\nimport classes from './Posts.module.css';\r\nimport {PostCard} from '../components/PostCard';\r\nimport {NavBar} from \"../components/NavBar\";\r\nimport {Loader} from \"../components/Loader\";\r\n\r\nexport const Posts = () => {\r\n\r\n    const { loading, error, data } = useQuery(GET_POSTS);\r\n\r\n    if (loading) return <Loader />;\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return <div className = {classes.Users} >\r\n        <NavBar header={'Posts List'}/>\r\n        <div className={classes.UsersList}>\r\n            {data.posts.data.map((post) => <PostCard key={post.id} user={post}/>)}\r\n        </div>\r\n    </div>;\r\n};","import React from \"react\";\nimport {useQuery} from \"@apollo/client\";\nimport {GET_PROFILE} from \"../model/graphql/queries\";\nimport {NavBar} from \"../components/NavBar\";\nimport {useParams} from \"react-router-dom\";\nimport classes from './Profile.module.scss';\nimport img from \"../images/user-icon.png\";\nimport {Loader} from \"../components/Loader\";\n\nexport const Profile = () => {\n\n    const {userId} = useParams();\n    const { loading, error, data } = useQuery(GET_PROFILE(userId));\n\n    if (loading) return <Loader/>;\n    if (error) return <p>Error :(</p>;\n\n    return <div>\n        <NavBar header='Profile' button={{title: '<', link: '/'}}/>\n        <div className={classes.ProfileCard}>\n            <img className={classes.UserImage} alt='' src={img}/>\n            <div className={classes.UserInfo}>\n                <h2>{data.user.name}</h2>\n                <ul>\n                    <li>Email: {data.user.email}</li>\n                    <li>Adress: {data.user.address.city}, {data.user.address.street}, {data.user.address.suite}, {data.user.address.zipcode}</li>\n                    <li>Phone: {data.user.phone}</li>\n                    <li>Website: {data.user.website}</li>\n                    <li>Company: {data.user.company.name} ({data.user.company.catchPhrase}, {data.user.company.bs})</li>\n                </ul>\n\n            </div>\n        </div>\n    </div>;\n\n};","import React, {useContext, useState} from \"react\";\nimport {AuthContext, LOGIN, loginUser} from \"../model/authStore\";\nimport classes from './Login.module.css';\n\nexport const Login = () => {\n    const {dispatch} = useContext(AuthContext);\n    let [login, setLogin] = useState('');\n    let [message, setMessage] = useState('');\n\n    const loginChangeHandler = (e) => {\n        setLogin(e.target.value);\n    };\n\n    const onLoginClick = (e) => {\n        e.preventDefault();\n        if(login) {\n            //имитация авторизации\n            const user = loginUser(login);\n            dispatch({type: LOGIN, user});\n        } else {\n            setMessage(<p className={classes.warning}>Enter you name!</p>);\n        }\n    };\n\n    return <div className={classes.Login}>\n        <div className={classes.LoginHeader}>\n            <h2>Login Page</h2>\n        </div>\n        <div className={classes.LoginContent}>\n            <p>Hello! Enter your Name</p>\n            <form onSubmit={onLoginClick}>\n                <input name='login' type='text' placeholder='Enter Username' value={login} onChange={loginChangeHandler}/>\n                <button type='submit'>Login</button>\n            </form>\n            {message}\n        </div>\n    </div>\n\n};","import React, {useReducer} from 'react';\nimport {Posts} from './pages/Posts';\nimport {Profile} from \"./pages/Profile\";\nimport {Login} from \"./pages/Login\";\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {AuthContext, authInitialState, authReducer, LOGIN} from \"./model/authStore\";\nimport './App.css';\nimport {checkAuth} from \"./model/authStore\";\n\nfunction App() {\n\n    const [state, dispatch] = useReducer(authReducer, authInitialState);\n    //Имитация проверки на авторизацию\n    //если бы был асинхронный запрос на сервер, можно было бы использовать например useEffect\n    if (!state.user) {\n        const user = checkAuth();\n        if (user) {\n            dispatch({type: LOGIN, user});\n        }\n    }\n\n    return (\n        <div className=\"app-wrapper\">\n            <div className=\"app-content\">\n                <AuthContext.Provider value={{state, dispatch}}>\n                    {state.user ?\n                        <Switch>\n                            <Route path='/user/:userId' render={() => <Profile/>}/>\n                            <Route exact path='/' render={() => <Posts/>}/>\n                            <Redirect to='/'/>\n                        </Switch>\n                        :\n                        <Switch>\n                            <Route path='/login' render={() => <Login/>}/>\n                            <Redirect to='/login'/>\n                        </Switch>\n                    }\n                </AuthContext.Provider>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport {HashRouter} from \"react-router-dom\";\n\nconst client = new ApolloClient({\n  uri: 'https://api.graphqlplaceholder.com/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    /*Лучше использовать BrowserRouter. Но для корректной работы деплоя на gh-pages пришлось использовать HashRouter.*/\n      <HashRouter>\n          <App />\n      </HashRouter>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}